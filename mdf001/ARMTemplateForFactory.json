{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mdf001"
		},
		"DB01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DB01'"
		},
		"DB02_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DB02'"
		},
		"DBS_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'DBS'"
		},
		"msa01_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'msa01'"
		},
		"msa01_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ms01.dfs.core.windows.net"
		},
		"sfDB01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sfDB01'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AggregateDerivedColumn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AggrDerivedColumns",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AggrDerivedColumn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"POH": {},
									"POFactAvg": {
										"tableName": "PurchasOrder_Fact_Avg"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AggrDerivedColumn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArrayToString')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Concat Funtion with Loop",
				"activities": [
					{
						"name": "EmpInfoEmailCSV",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "EmpInfoEmail.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ParaCon1",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "Bronze"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachEmail",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EmpInfoEmailCSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EmpInfoEmailCSV').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set tmpEmail",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "tmpEmail",
										"value": {
											"value": "@concat(item().Email,',',variables('Email'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Email",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set tmpEmail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Email",
										"value": {
											"value": "@variables('tmpEmail')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Email": {
						"type": "String"
					},
					"tmpEmail": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Real Life Scenarios"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParaCon1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobToSnow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Gen2ToSfDB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpInfoCSV": {},
									"SnowDB01": {
										"tableName": "EmpInfo"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SnowFlake"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Gen2ToSfDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConcatColumn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StringConcat",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpInfoCSV": {},
									"EmpInfoEmailCSV": {
										"folderName": "Bronze"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Real Life Scenarios"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/StringConcat')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalSplitQtr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ConditionalSplit",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ConditionalSplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"POH": {},
									"POHQ1": {
										"tableName": "POH_Q1"
									},
									"POHQ2": {
										"tableName": "POH_Q2"
									},
									"POHQ3": {
										"tableName": "POH_Q3"
									},
									"POHQ4": {
										"tableName": "POH_Q4"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ConditionalSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DailyPipelineRunLogs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "5 Sec",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "logFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "5 Sec",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "logFileName",
							"value": {
								"value": "@concat(formatDateTime(utcnow(),'yyyyMMdd'),'_log.csv')\r\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "logFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "OpLogFileAsIp",
								"type": "DatasetReference",
								"parameters": {
									"logFileName": {
										"value": "@variables('logFileName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata1').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "logFile",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "logFile",
											"type": "DataFlowReference",
											"parameters": {
												"AdfName": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"RunID": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerID": {
													"value": "'@{pipeline().TriggerId}'",
													"type": "Expression"
												},
												"TriggerTime": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												},
												"TriggerType": {
													"value": "'@{pipeline().TriggerType}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{'Success'}'",
													"type": "Expression"
												},
												"logFilename": {
													"value": "'@{variables('logFileName')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Temp": {},
												"OpLogFile": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "logFileAppend",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "logFileAppend",
											"type": "DataFlowReference",
											"parameters": {
												"AdfName": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"RunID": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerID": {
													"value": "'@{pipeline().TriggerId}'",
													"type": "Expression"
												},
												"TriggerTime": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												},
												"TriggerType": {
													"value": "'@{pipeline().TriggerType}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{'Success'}'",
													"type": "Expression"
												},
												"logFilename": {
													"value": "'@{variables('logFileName')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Temp": {},
												"TodaysLogFile": {
													"logFileName": {
														"value": "@variables('logFileName')",
														"type": "Expression"
													}
												},
												"OpLogFile": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"logFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Real Life Scenarios"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OpLogFileAsIp')]",
				"[concat(variables('factoryId'), '/dataflows/logFile')]",
				"[concat(variables('factoryId'), '/dataflows/logFileAppend')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ErrorRowHandling RecordPipelineRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ErrorRowHandling",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesDataJune2021": {},
									"SalesDataBR": {
										"tableName": "SalesDataBR"
									},
									"SalesDataGR": {
										"tableName": "SalesDataGR"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_PipelineExecData]",
							"storedProcedureParameters": {
								"adfName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerID": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"triggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"triggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DB01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Real Life Scenarios"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ErrorRowHandling')]",
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadata Filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParaCon1",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "Bronze"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CSV",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CSV').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ParaCon1",
											"type": "DatasetReference",
											"parameters": {
												"folderName": "Bronze"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ParaCon1",
											"type": "DatasetReference",
											"parameters": {
												"folderName": "Filtered"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParaCon1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadataFilter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParaCon1",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "GetMeta"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FilterCSV",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item().name, '.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterCSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterCSV').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ParaCon1",
											"type": "DatasetReference",
											"parameters": {
												"folderName": "GetMeta"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ParaCon1",
											"type": "DatasetReference",
											"parameters": {
												"folderName": "Filtered"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParaCon1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental Keys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "IncrementalKeys",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpInfo1": {},
									"EmpInfo2": {},
									"EmpInfo": {
										"folderName": "Silver"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Real Life Scenarios"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/IncrementalKeys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonToDeltaDBR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "JsonLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "JsonLkp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "JsonLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('JsonLookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "NotebookPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "NBPath",
										"value": "/Users/m.adf@outlook.com/WidgetsJsonToFlat"
									}
								},
								{
									"name": "Notebook1",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "NotebookPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@variables('NBPath')",
											"type": "Expression"
										},
										"baseParameters": {
											"JsonFile": {
												"value": "@item().JsonFile",
												"type": "Expression"
											},
											"TableName": {
												"value": "@item().TableName",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DBS",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"NBPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/JsonLkp')]",
				"[concat(variables('factoryId'), '/linkedServices/DBS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LkpForEach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LkpFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "LkpFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LkpFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LkpFile').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "TxtToDB",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "TxtToDB",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"con1Lookup": {
													"fileName": {
														"value": "@item().Filename",
														"type": "Expression"
													}
												},
												"DB01": {
													"tableName": {
														"value": "@item().DbNname",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LkpFile')]",
				"[concat(variables('factoryId'), '/dataflows/TxtToDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupComparision')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LookupCompare",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrdersSrc": {},
									"OrdersTar": {},
									"OrdertarSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LookupCompare')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeJoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MergeJoin",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MergeJoin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"POH": {},
									"POD": {},
									"Product": {},
									"PurchaseOrderFact": {
										"tableName": "PurchaseOrderFact"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MergeJoin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PartitionDensRank')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "WindowsDensRank",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpInfoCsv": {},
									"PartitionDensRank": {
										"tableName": "PartitionDensRank"
									},
									"Partition": {
										"tableName": "Partition"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/WindowsDensRank')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type 2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD Type 2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpSrcType2": {},
									"EmpTarType2": {},
									"EmpTarInsert": {},
									"EmpTarUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD Type 2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type1 Delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "SCD Type1 with Delete and Upsert",
				"activities": [
					{
						"name": "SCDType1Delete",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD Type1 Delete",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrdSrc": {},
									"OrdTar": {},
									"UpsertOrdTar": {},
									"DeleteFromOrdTar": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD Type1 Delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "SCD Type1 with Alter Row. Insert and Update using Upsert",
				"activities": [
					{
						"name": "SCDType1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD Type1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrdSrc": {},
									"OrdTar": {},
									"UpsertOrdTar": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD Type1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Timestamp Based CDC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StartTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT TableName,WatermarkValue FROM WatermarkTable WHERE TableName = '[dbo].[Orders_Src]'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WaterMarkTbl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "EndTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT max(OrderDate) as mDate FROM [dbo].[Orders_Src]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OrdSrc",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "EndTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [dbo].[Orders_Src]\nWHERE OrderDate > '@{activity('StartTime').output.firstRow.WatermarkValue}'\nAND\nOrderDate <= '@{activity('EndTime').output.firstRow.mDate}'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OrdSrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OrdTar",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"NewTime": {
									"value": {
										"value": "@activity('EndTime').output.firstRow.mDate",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('StartTime').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DB01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WaterMarkTbl')]",
				"[concat(variables('factoryId'), '/datasets/OrdSrc')]",
				"[concat(variables('factoryId'), '/datasets/OrdTar')]",
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Top3 Per Day')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Top3PerDay",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SOD": {},
									"Product": {},
									"DailyProdSales": {
										"tableName": "Top3ProdsPerDay"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Prep"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Top3PerDay')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnionBranch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UnionBranch",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Group1": {
										"fileName": "Group1.txt"
									},
									"Group2": {
										"fileName": "Group2.txt"
									},
									"Group3": {
										"fileName": "Group3.txt"
									},
									"OrdersNorthwind": {
										"tableName": "Orders_Northwind"
									},
									"UnionDB": {
										"tableName": "UnionDB"
									},
									"GroupUnion": {
										"folder": "Union"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/UnionBranch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Until')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('Flag')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "SELECT Status FROM [dbo].[Status] where ID = 1",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ParaDB01",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "Status"
											}
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Lookup1').output.firstRow.Status, 'Y')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "Flag",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LkpFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParaCon1",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "GetMeta"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Flag": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Azure"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T15:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LkpFile')]",
				"[concat(variables('factoryId'), '/datasets/ParaCon1')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WindowsRunningTotal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "WindowsCumulativeAdd",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpInfoCsv": {},
									"Partition": {
										"tableName": "WindowsRunningTotal"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Real Life Scenarios"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/WindowsCumulativeAdd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EmpInfoEmail.csv",
						"folderPath": "Bronze",
						"fileSystem": "con1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "con1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpInfo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EmpInfo.csv",
						"fileSystem": "con1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Dept",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpInfo1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EmpInfo1.csv",
						"folderPath": "Bronze",
						"fileSystem": "con1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpInfo2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EmpInfo2.csv",
						"folderPath": "Bronze",
						"fileSystem": "con1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Dept",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpInfoCsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EmpInfo.csv",
						"fileSystem": "con1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Dept",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpSrcType2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmpName",
						"type": "varchar"
					},
					{
						"name": "Dept",
						"type": "varchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "EmpSrc_Type2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpTarType2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmpName",
						"type": "varchar"
					},
					{
						"name": "Dept",
						"type": "varchar"
					},
					{
						"name": "Active",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "EmpTar_Type2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonLkp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "JsonLkp.csv",
						"folderPath": "Bronze",
						"fileSystem": "con1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LkpFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "LkpFile.txt",
						"folderPath": "Lookup",
						"fileSystem": "con2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupDIR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Lookup",
						"fileSystem": "con2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpLogFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "LogFiles/Logs",
						"fileSystem": "con2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpLogFileAsIp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"logFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().logFileName",
							"type": "Expression"
						},
						"folderPath": "LogFiles/Logs",
						"fileSystem": "con2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdSrc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "nchar"
					},
					{
						"name": "EmployeeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "OrdAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Orders_Src"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdTar')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "nchar"
					},
					{
						"name": "EmployeeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "OrdAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Orders_Tar"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/POD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PurchaseOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PurchaseOrderDetailID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ReceivedQty",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "RejectedQty",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "StockedQty",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PurchaseOrderDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/POH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PurchaseOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EmployeeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VendorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipMethodID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PurchaseOrderHeader"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParaCon1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderName",
							"type": "Expression"
						},
						"fileSystem": "con1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParaCon2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": "con2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParaCon2Union')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Union",
						"fileSystem": "con2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParaDB01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParaDB02')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB02",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "MakeFlag",
						"type": "bit"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nvarchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nvarchar"
					},
					{
						"name": "Class",
						"type": "nvarchar"
					},
					{
						"name": "Style",
						"type": "nvarchar"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductDB02')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "MakeFlag",
						"type": "bit"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "SellEndDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "DiscontinuedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SOD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderDetailID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CarrierTrackingNumber",
						"type": "nvarchar"
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SpecialOfferID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "SalesOrderDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesDataJune2021')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SalesData June-2021.csv",
						"folderPath": "Bronze",
						"fileSystem": "con1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "String"
					},
					{
						"name": "TaxAmt",
						"type": "String"
					},
					{
						"name": "Freight",
						"type": "String"
					},
					{
						"name": "TotalDue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowDB01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sfDB01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sfDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "msa01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Temp.csv",
						"folderPath": "LogFiles/Input",
						"fileSystem": "con2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/msa01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WaterMarkTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DB01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "WatermarkTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DB01_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB02')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DB02_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DBS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4891401508318518.18.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('DBS_accessToken')]"
					},
					"existingClusterId": "1230-142436-l49r4f3v"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/msa01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('msa01_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('msa01_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sfDB01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Snowflake",
				"typeProperties": {
					"connectionString": "[parameters('sfDB01_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AggrDerivedColumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "POH",
								"type": "DatasetReference"
							},
							"name": "POH"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "POFactAvg"
						}
					],
					"transformations": [
						{
							"name": "YearMonthQuarter"
						},
						{
							"name": "Avg"
						}
					],
					"script": "source(output(\n\t\tPurchaseOrderID as integer,\n\t\tRevisionNumber as integer,\n\t\tStatus as integer,\n\t\tEmployeeID as integer,\n\t\tVendorID as integer,\n\t\tShipMethodID as integer,\n\t\tOrderDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> POH\nPOH derive(Year = year(OrderDate),\n\t\tQuarter = case(month(OrderDate) >= 1 && month(OrderDate) <= 3, 'Q1',\r\n    month(OrderDate) >= 4 && month(OrderDate) <= 6, 'Q2',\r\n    month(OrderDate) >= 7 && month(OrderDate) <= 9, 'Q3', 'Q4'  \r\n),\n\t\tMonth = month(OrderDate)) ~> YearMonthQuarter\nYearMonthQuarter aggregate(groupBy(Year,\n\t\tQuarter,\n\t\tMonth,\n\t\tEmployeeID,\n\t\tVendorID),\n\t{Avg(SubTotal)} = avg(SubTotal),\n\t\t{Avg(TaxAmt)} = avg(TaxAmt),\n\t\t{Avg(Freight)} = avg(Freight),\n\t\t{Avg(TotalDue)} = avg(TotalDue)) ~> Avg\nAvg sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tYear,\n\t\tQuarter,\n\t\tMonth,\n\t\tEmployeeID,\n\t\tVendorID,\n\t\t{Avg(SubTotal)},\n\t\t{Avg(TaxAmt)},\n\t\t{Avg(Freight)},\n\t\t{Avg(TotalDue)}\n\t)) ~> POFactAvg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/POH')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "POH",
								"type": "DatasetReference"
							},
							"name": "POH"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "POHQ1"
						},
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "POHQ2"
						},
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "POHQ3"
						},
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "POHQ4"
						}
					],
					"transformations": [
						{
							"name": "YMQ"
						},
						{
							"name": "Year2012"
						},
						{
							"name": "ConditionalSplitQtr"
						}
					],
					"script": "source(output(\n\t\tPurchaseOrderID as integer,\n\t\tRevisionNumber as integer,\n\t\tStatus as integer,\n\t\tEmployeeID as integer,\n\t\tVendorID as integer,\n\t\tShipMethodID as integer,\n\t\tOrderDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> POH\nPOH derive(Year = year(OrderDate),\n\t\tQuarter = case(month(OrderDate) > 4, 'Q1', month(OrderDate) > 7, 'Q2',month(OrderDate) > 10, 'Q3','Q4'),\n\t\tMonth = month(OrderDate)) ~> YMQ\nYMQ filter(Year == 2012) ~> Year2012\nYear2012 split(Quarter == 'Q1',\n\tQuarter == 'Q2',\n\tQuarter == 'Q3',\n\tdisjoint: false) ~> ConditionalSplitQtr@(Q1, Q2, Q3, Q4)\nConditionalSplitQtr@Q1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> POHQ1\nConditionalSplitQtr@Q2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> POHQ2\nConditionalSplitQtr@Q3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> POHQ3\nConditionalSplitQtr@Q4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> POHQ4"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/POH')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ErrorRowHandling')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesDataJune2021",
								"type": "DatasetReference"
							},
							"name": "SalesDataJune2021"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "SalesDataBR"
						},
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "SalesDataGR"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "SourceFileName1"
						},
						{
							"name": "SourceFileName2"
						}
					],
					"script": "source(output(\n\t\tSalesOrderID as string,\n\t\tOrderDate as string,\n\t\tSubTotal as string,\n\t\tTaxAmt as string,\n\t\tFreight as string,\n\t\tTotalDue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SalesDataJune2021\nSalesDataJune2021 split(isNull(toDate(OrderDate, 'yyyy-MM-dd')),\n\tdisjoint: false) ~> ConditionalSplit1@(ErrorRows, GoodRows)\nConditionalSplit1@ErrorRows derive(FileName = 'SalesData June-2021.csv') ~> SourceFileName1\nConditionalSplit1@GoodRows derive(SalesOrderID = toInteger(SalesOrderID),\n\t\tOrderDate = toDate(OrderDate, 'yyyy-MM-dd'),\n\t\tSubTotal = toDecimal(SubTotal, 10, 2),\n\t\tTaxAmt = toDecimal(TaxAmt, 10, 2),\n\t\tFreight = toDecimal(Freight, 10, 2),\n\t\tTotalDue = toDecimal(TotalDue, 10, 2),\n\t\tFileName = 'SalesData June-2021.csv') ~> SourceFileName2\nSourceFileName1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SalesDataBR\nSourceFileName2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SalesDataGR"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SalesDataJune2021')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Gen2ToSfDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpInfo",
								"type": "DatasetReference"
							},
							"name": "EmpInfoCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowDB01",
								"type": "DatasetReference"
							},
							"name": "SnowDB01"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tEmpID as string,\n\t\tEmpName as string,\n\t\tGender as string,\n\t\tSalary as string,\n\t\tDept as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpInfoCSV\nEmpInfoCSV sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstageInsert: true) ~> SnowDB01"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpInfo')]",
				"[concat(variables('factoryId'), '/datasets/SnowDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalKeys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpInfo1",
								"type": "DatasetReference"
							},
							"name": "EmpInfo1"
						},
						{
							"dataset": {
								"referenceName": "EmpInfo2",
								"type": "DatasetReference"
							},
							"name": "EmpInfo2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaCon1",
								"type": "DatasetReference"
							},
							"name": "EmpInfo"
						}
					],
					"transformations": [
						{
							"name": "EmpID"
						},
						{
							"name": "Union1"
						}
					],
					"script": "source(output(\n\t\tEmpID as short,\n\t\tEmpName as string,\n\t\tGender as string,\n\t\tSalary as short,\n\t\tDept as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpInfo1\nsource(output(\n\t\tEmpName as string,\n\t\tGender as string,\n\t\tSalary as short,\n\t\tDept as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpInfo2\nEmpInfo2 keyGenerate(output(EmpID as long),\n\tstartAt: 7L) ~> EmpID\nEmpInfo1, EmpID union(byName: true)~> Union1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string\n\t),\n\tpartitionFileNames:['EmpInfoUnion.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> EmpInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpInfo1')]",
				"[concat(variables('factoryId'), '/datasets/EmpInfo2')]",
				"[concat(variables('factoryId'), '/datasets/ParaCon1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupCompare')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrdSrc",
								"type": "DatasetReference"
							},
							"name": "OrdersSrc"
						},
						{
							"dataset": {
								"referenceName": "OrdTar",
								"type": "DatasetReference"
							},
							"name": "OrdersTar"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OrdTar",
								"type": "DatasetReference"
							},
							"name": "OrdertarSink"
						}
					],
					"transformations": [
						{
							"name": "SelectTar"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> OrdersSrc\nsource(output(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> OrdersTar\nOrdersTar select(mapColumn(\n\t\tOrderID_Lkp = OrderID,\n\t\tCustomerID_Lkp = CustomerID,\n\t\tEmployeeID_Lkp = EmployeeID,\n\t\tOrderDate_Lkp = OrderDate,\n\t\tOrdAmt_Lkp = OrdAmt\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTar\nOrdersSrc, SelectTar lookup(OrderID == OrderID_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 filter(isNull(OrderID_Lkp)) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> OrdertarSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrdSrc')]",
				"[concat(variables('factoryId'), '/datasets/OrdTar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeJoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "POH",
								"type": "DatasetReference"
							},
							"name": "POH"
						},
						{
							"dataset": {
								"referenceName": "POD",
								"type": "DatasetReference"
							},
							"name": "POD"
						},
						{
							"dataset": {
								"referenceName": "Product",
								"type": "DatasetReference"
							},
							"name": "Product"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "PurchaseOrderFact"
						}
					],
					"transformations": [
						{
							"name": "PurchaseOrderID"
						},
						{
							"name": "POHPOD"
						},
						{
							"name": "ProductID"
						},
						{
							"name": "ProductSelect"
						}
					],
					"script": "source(output(\n\t\tPurchaseOrderID as integer,\n\t\tRevisionNumber as integer,\n\t\tStatus as integer,\n\t\tEmployeeID as integer,\n\t\tVendorID as integer,\n\t\tShipMethodID as integer,\n\t\tOrderDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> POH\nsource(output(\n\t\tPurchaseOrderID as integer,\n\t\tModifiedDate as timestamp,\n\t\tPurchaseOrderDetailID as integer,\n\t\tDueDate as timestamp,\n\t\tOrderQty as integer,\n\t\tProductID as integer,\n\t\tUnitPrice as decimal(19,4),\n\t\tLineTotal as decimal(19,4),\n\t\tReceivedQty as decimal(8,2),\n\t\tRejectedQty as decimal(8,2),\n\t\tStockedQty as decimal(9,2)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> POD\nsource(output(\n\t\tModifiedDate as timestamp,\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tMakeFlag as boolean,\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as integer,\n\t\tReorderPoint as integer,\n\t\tStandardCost as decimal(19,4),\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tWeightUnitMeasureCode as string,\n\t\tWeight as decimal(8,2),\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\tClass as string,\n\t\tStyle as string,\n\t\tProductSubcategoryID as integer,\n\t\tProductModelID as integer,\n\t\tSellStartDate as timestamp,\n\t\tSellEndDate as timestamp,\n\t\tDiscontinuedDate as timestamp,\n\t\trowguid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Product\nPOH, POD join(POH@PurchaseOrderID == POD@PurchaseOrderID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> PurchaseOrderID\nPurchaseOrderID select(mapColumn(\n\t\tPurchaseOrderID = POH@PurchaseOrderID,\n\t\tRevisionNumber,\n\t\tStatus,\n\t\tEmployeeID,\n\t\tVendorID,\n\t\tShipMethodID,\n\t\tOrderDate,\n\t\tShipDate,\n\t\tTaxAmt,\n\t\tFreight,\n\t\tModifiedDate = POH@ModifiedDate,\n\t\tPurchaseOrderID = POD@PurchaseOrderID,\n\t\tModifiedDate = POD@ModifiedDate,\n\t\tDueDate,\n\t\tOrderQty,\n\t\tProductID,\n\t\tUnitPrice,\n\t\tLineTotal,\n\t\tReceivedQty,\n\t\tRejectedQty,\n\t\tStockedQty\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> POHPOD\nPOHPOD, ProductSelect join(POHPOD@ProductID == ProductSelect@ProductID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> ProductID\nProduct select(mapColumn(\n\t\tProductID,\n\t\tStandardCost\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProductSelect\nProductID sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> PurchaseOrderFact"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/POH')]",
				"[concat(variables('factoryId'), '/datasets/POD')]",
				"[concat(variables('factoryId'), '/datasets/Product')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type 2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpSrcType2",
								"type": "DatasetReference"
							},
							"name": "EmpSrcType2"
						},
						{
							"dataset": {
								"referenceName": "EmpTarType2",
								"type": "DatasetReference"
							},
							"name": "EmpTarType2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpTarType2",
								"type": "DatasetReference"
							},
							"name": "EmpTarInsert"
						},
						{
							"dataset": {
								"referenceName": "EmpTarType2",
								"type": "DatasetReference"
							},
							"name": "EmpTarUpdate"
						}
					],
					"transformations": [
						{
							"name": "SrcHashKey"
						},
						{
							"name": "TarHashKey"
						},
						{
							"name": "DoesNotExists"
						},
						{
							"name": "Exists"
						},
						{
							"name": "SetActive1"
						},
						{
							"name": "SetActive0"
						},
						{
							"name": "UpdateExisting"
						}
					],
					"script": "source(output(\n\t\tEmpID as integer,\n\t\tEmpName as string,\n\t\tDept as string,\n\t\tStartDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EmpSrcType2\nsource(output(\n\t\tEmpID as integer,\n\t\tEmpName as string,\n\t\tDept as string,\n\t\tActive as integer,\n\t\tStartDate as date,\n\t\tEndDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EmpTarType2\nEmpSrcType2 derive(SrcHashKey = md5(EmpName,Dept)) ~> SrcHashKey\nEmpTarType2 derive(TarHashKey = md5(EmpName,Dept)) ~> TarHashKey\nSrcHashKey, TarHashKey exists(SrcHashKey == TarHashKey,\n\tnegate:true,\n\tbroadcast: 'auto')~> DoesNotExists\nTarHashKey, SetActive1 exists(EmpTarType2@EmpID == EmpSrcType2@EmpID\n\t&& EmpTarType2@EmpName == EmpSrcType2@EmpName,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists\nDoesNotExists derive(Active = 1,\n\t\tEndDate = toDate('9999-12-31')) ~> SetActive1\nExists derive(Active = 0,\n\t\tEndDate = toDate(currentUTC())) ~> SetActive0\nSetActive0 alterRow(updateIf(true())) ~> UpdateExisting\nSetActive1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEmpID as integer,\n\t\tEmpName as string,\n\t\tDept as string,\n\t\tActive as integer,\n\t\tStartDate as date,\n\t\tEndDate as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EmpTarInsert\nUpdateExisting sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEmpID as integer,\n\t\tEmpName as string,\n\t\tDept as string,\n\t\tActive as integer,\n\t\tStartDate as date,\n\t\tEndDate as date\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['EmpID','EmpName','Dept'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EmpTarUpdate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpSrcType2')]",
				"[concat(variables('factoryId'), '/datasets/EmpTarType2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type1 Delete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrdSrc",
								"type": "DatasetReference"
							},
							"name": "OrdSrc"
						},
						{
							"dataset": {
								"referenceName": "OrdTar",
								"type": "DatasetReference"
							},
							"name": "OrdTar"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OrdTar",
								"type": "DatasetReference"
							},
							"name": "UpsertOrdTar"
						},
						{
							"dataset": {
								"referenceName": "OrdTar",
								"type": "DatasetReference"
							},
							"name": "DeleteFromOrdTar"
						}
					],
					"transformations": [
						{
							"name": "OrdTarLkp"
						},
						{
							"name": "SrcTarCompare"
						},
						{
							"name": "UpsertRecords"
						},
						{
							"name": "DsntExistInSrc"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> OrdSrc\nsource(output(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> OrdTar\nOrdTar select(mapColumn(\n\t\tOrderID_Lkp = OrderID,\n\t\tCustomerID_Lkp = CustomerID,\n\t\tEmployeeID_Lkp = EmployeeID,\n\t\tOrderDate_Lkp = OrderDate,\n\t\tOrdAmt_Lkp = OrdAmt\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OrdTarLkp\nOrdSrc, OrdTarLkp lookup(OrderID == OrderID_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SrcTarCompare\nSrcTarCompare alterRow(upsertIf(true())) ~> UpsertRecords\nOrdTar, OrdSrc lookup(OrdTar@OrderID == OrdSrc@OrderID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> DsntExistInSrc\nDsntExistInSrc alterRow(deleteIf(isNull(OrdSrc@OrderID))) ~> AlterRow1\nUpsertRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['OrderID'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tOrderID,\n\t\tCustomerID,\n\t\tEmployeeID,\n\t\tOrderDate,\n\t\tOrdAmt\n\t)) ~> UpsertOrdTar\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['OrderID'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DeleteFromOrdTar"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrdSrc')]",
				"[concat(variables('factoryId'), '/datasets/OrdTar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Type1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrdSrc",
								"type": "DatasetReference"
							},
							"name": "OrdSrc"
						},
						{
							"dataset": {
								"referenceName": "OrdTar",
								"type": "DatasetReference"
							},
							"name": "OrdTar"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OrdTar",
								"type": "DatasetReference"
							},
							"name": "UpsertOrdTar"
						}
					],
					"transformations": [
						{
							"name": "OrdTarLkp"
						},
						{
							"name": "SrcTarCompare"
						},
						{
							"name": "UpsertRecords"
						}
					],
					"script": "source(output(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> OrdSrc\nsource(output(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> OrdTar\nOrdTar select(mapColumn(\n\t\tOrderID_Lkp = OrderID,\n\t\tCustomerID_Lkp = CustomerID,\n\t\tEmployeeID_Lkp = EmployeeID,\n\t\tOrderDate_Lkp = OrderDate,\n\t\tOrdAmt_Lkp = OrdAmt\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OrdTarLkp\nOrdSrc, OrdTarLkp lookup(OrderID == OrderID_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> SrcTarCompare\nSrcTarCompare alterRow(upsertIf(true())) ~> UpsertRecords\nUpsertRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tOrderID as integer,\n\t\tCustomerID as string,\n\t\tEmployeeID as integer,\n\t\tOrderDate as timestamp,\n\t\tOrdAmt as decimal(19,4)\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['OrderID'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tOrderID,\n\t\tCustomerID,\n\t\tEmployeeID,\n\t\tOrderDate,\n\t\tOrdAmt\n\t)) ~> UpsertOrdTar"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrdSrc')]",
				"[concat(variables('factoryId'), '/datasets/OrdTar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StringConcat')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpInfoCsv",
								"type": "DatasetReference"
							},
							"name": "EmpInfoCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaCon1",
								"type": "DatasetReference"
							},
							"name": "EmpInfoEmailCSV"
						}
					],
					"transformations": [
						{
							"name": "EmailCol"
						}
					],
					"script": "source(output(\n\t\tEmpID as string,\n\t\tEmpName as string,\n\t\tGender as string,\n\t\tSalary as string,\n\t\tDept as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpInfoCSV\nEmpInfoCSV derive(Email = concat(EmpName,'@',Dept,'.com')) ~> EmailCol\nEmailCol sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string\n\t),\n\tpartitionFileNames:['EmpInfoEmail.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> EmpInfoEmailCSV"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpInfoCsv')]",
				"[concat(variables('factoryId'), '/datasets/ParaCon1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Top3PerDay')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SOD",
								"type": "DatasetReference"
							},
							"name": "SOD"
						},
						{
							"dataset": {
								"referenceName": "ProductDB02",
								"type": "DatasetReference"
							},
							"name": "Product"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "DailyProdSales"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "SelectProd"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tSalesOrderDetailID as integer,\n\t\tCarrierTrackingNumber as string,\n\t\tOrderQty as integer,\n\t\tProductID as integer,\n\t\tSpecialOfferID as integer,\n\t\tUnitPrice as decimal(19,4),\n\t\tUnitPriceDiscount as decimal(19,4),\n\t\tLineTotal as decimal(38,6),\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SOD\nsource(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tMakeFlag as boolean,\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as integer,\n\t\tReorderPoint as integer,\n\t\tStandardCost as decimal(19,4),\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tWeightUnitMeasureCode as string,\n\t\tWeight as decimal(8,2),\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\tClass as string,\n\t\tStyle as string,\n\t\tProductSubcategoryID as integer,\n\t\tProductModelID as integer,\n\t\tSellStartDate as timestamp,\n\t\tSellEndDate as timestamp,\n\t\tDiscontinuedDate as timestamp,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Product\nSOD, SelectProd join(SOD@ProductID == SelectProd@ProductID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nProduct select(mapColumn(\n\t\tProductID,\n\t\tName,\n\t\tStandardCost\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProd\nJoin1 aggregate(groupBy(ModifiedDate,\n\t\tName),\n\tProductCount = count(Name)) ~> Aggregate1\nAggregate1 window(over(ModifiedDate),\n\tdesc(ProductCount, true),\n\tProductSalesRank = rowNumber()) ~> Window1\nWindow1 filter(ProductSalesRank <= 3) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DailyProdSales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SOD')]",
				"[concat(variables('factoryId'), '/datasets/ProductDB02')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TxtToDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LookupDIR",
								"type": "DatasetReference"
							},
							"name": "con1Lookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "DB01"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> con1Lookup\ncon1Lookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DB01"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LookupDIR')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnionBranch')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParaCon2Union",
								"type": "DatasetReference"
							},
							"name": "Group1"
						},
						{
							"dataset": {
								"referenceName": "ParaCon2Union",
								"type": "DatasetReference"
							},
							"name": "Group2"
						},
						{
							"dataset": {
								"referenceName": "ParaCon2Union",
								"type": "DatasetReference"
							},
							"name": "Group3"
						},
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "OrdersNorthwind"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "UnionDB"
						},
						{
							"dataset": {
								"referenceName": "ParaCon2",
								"type": "DatasetReference"
							},
							"name": "GroupUnion"
						}
					],
					"transformations": [
						{
							"name": "Union1"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> Group1\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> Group2\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> Group3\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> OrdersNorthwind\nGroup1, Group2, Group3, OrdersNorthwind union(byName: true)~> Union1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UnionDB\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['UnionGroup.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> GroupUnion"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParaCon2Union')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]",
				"[concat(variables('factoryId'), '/datasets/ParaCon2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WindowsCumulativeAdd')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpInfo",
								"type": "DatasetReference"
							},
							"name": "EmpInfoCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "Partition"
						}
					],
					"transformations": [
						{
							"name": "Window1"
						}
					],
					"script": "source(output(\n\t\tEmpID as short,\n\t\tEmpName as string,\n\t\tGender as string,\n\t\tSalary as short,\n\t\tDept as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpInfoCsv\nEmpInfoCsv window(asc(EmpID, true),\n\tRunningTotal = sum(Salary)) ~> Window1\nWindow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Partition"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpInfo')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WindowsDensRank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpInfo",
								"type": "DatasetReference"
							},
							"name": "EmpInfoCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "PartitionDensRank"
						},
						{
							"dataset": {
								"referenceName": "ParaDB01",
								"type": "DatasetReference"
							},
							"name": "Partition"
						}
					],
					"transformations": [
						{
							"name": "Window1"
						}
					],
					"script": "source(output(\n\t\tEmpID as string,\n\t\tEmpName as string,\n\t\tGender as string,\n\t\tSalary as string,\n\t\tDept as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpInfoCsv\nEmpInfoCsv window(over(Dept),\n\tasc(Salary, true),\n\tSalRank = rank(),\n\t\tSalDensRank = denseRank()) ~> Window1\nWindow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> PartitionDensRank\nWindow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEmpID,\n\t\tEmpName,\n\t\tGender,\n\t\tDept,\n\t\tSalary\n\t)) ~> Partition"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpInfo')]",
				"[concat(variables('factoryId'), '/datasets/ParaDB01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/logFile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Temp",
								"type": "DatasetReference"
							},
							"name": "Temp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OpLogFile",
								"type": "DatasetReference"
							},
							"name": "OpLogFile"
						}
					],
					"transformations": [
						{
							"name": "LogColumns"
						},
						{
							"name": "RemoveTemp"
						}
					],
					"script": "parameters{\n\tAdfName as string,\n\tPipelineName as string,\n\tTriggerName as string,\n\tRunID as string,\n\tTriggerID as string,\n\tTriggerTime as string,\n\tTriggerType as string,\n\tStatus as string,\n\tlogFilename as string\n}\nsource(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Temp\nTemp derive(AdfName = $AdfName,\n\t\tPipelineName = $PipelineName,\n\t\tTriggerName = $TriggerName,\n\t\tRunID = $RunID,\n\t\tTriggerID = $TriggerID,\n\t\tTriggerTime = $TriggerTime,\n\t\tTriggerType = $TriggerType,\n\t\tStatus = $Status) ~> LogColumns\nLogColumns select(mapColumn(\n\t\tAdfName,\n\t\tPipelineName,\n\t\tTriggerName,\n\t\tRunID,\n\t\tTriggerID,\n\t\tTriggerTime,\n\t\tTriggerType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveTemp\nRemoveTemp sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($logFilename)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> OpLogFile"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Temp')]",
				"[concat(variables('factoryId'), '/datasets/OpLogFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/logFileAppend')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Temp",
								"type": "DatasetReference"
							},
							"name": "Temp"
						},
						{
							"dataset": {
								"referenceName": "OpLogFileAsIp",
								"type": "DatasetReference"
							},
							"name": "TodaysLogFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OpLogFile",
								"type": "DatasetReference"
							},
							"name": "OpLogFile"
						}
					],
					"transformations": [
						{
							"name": "LogColumns"
						},
						{
							"name": "RemoveTemp"
						},
						{
							"name": "Union1"
						}
					],
					"script": "parameters{\n\tAdfName as string,\n\tPipelineName as string,\n\tTriggerName as string,\n\tRunID as string,\n\tTriggerID as string,\n\tTriggerTime as string,\n\tTriggerType as string,\n\tStatus as string,\n\tlogFilename as string\n}\nsource(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Temp\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[('LogFiles/Logs/' + $logFilename)]) ~> TodaysLogFile\nTemp derive(AdfName = $AdfName,\n\t\tPipelineName = $PipelineName,\n\t\tTriggerName = $TriggerName,\n\t\tRunID = $RunID,\n\t\tTriggerID = $TriggerID,\n\t\tTriggerTime = $TriggerTime,\n\t\tTriggerType = $TriggerType,\n\t\tStatus = $Status) ~> LogColumns\nLogColumns select(mapColumn(\n\t\tAdfName,\n\t\tPipelineName,\n\t\tTriggerName,\n\t\tRunID,\n\t\tTriggerID,\n\t\tTriggerTime,\n\t\tTriggerType,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveTemp\nRemoveTemp, TodaysLogFile union(byName: true)~> Union1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($logFilename)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> OpLogFile"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Temp')]",
				"[concat(variables('factoryId'), '/datasets/OpLogFileAsIp')]",
				"[concat(variables('factoryId'), '/datasets/OpLogFile')]"
			]
		}
	]
}